[gd_scene load_steps=8 format=2]

[ext_resource path="res://sprite_sheets/dan.png" type="Texture" id=1]
[ext_resource path="res://Ui/Control.gd" type="Script" id=2]
[ext_resource path="res://Ui/font.tres" type="DynamicFont" id=3]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int iterations = 20;
uniform float formuparam = 1.00;

uniform int volsteps = 20;
uniform float stepsize = 0.1;

uniform float zoom = 0.800;
uniform float tile = 0.5;
uniform float speed = 0.001;

uniform float brightness = 0.002;
uniform float darkmatter = 0.100;
uniform float distfading = 0.650;
uniform float saturation = 0.750;

uniform vec2 iResolution = vec2(192, 192);
uniform vec2 iMouse = vec2(0,0);

float SCurve (float value) {

    if (value < 0.5)
    {
        return value * value * value * value * value * 16.0; 
    }
    
    value -= 1.0;
    
    return value * value * value * value * value * 16.0 + 1.0;
}

void fragment()
{
	//get coords and direction
	vec2 uv=FRAGCOORD.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);
	float time=TIME*speed+.25;

	//mouse rotation
	float a1=0.5+iMouse.x/iResolution.x*2.;
	float a2=0.8+iMouse.y/iResolution.y*2.;
	mat2 rot1=mat2(vec2(cos(a1),sin(a1)),vec2(-sin(a1),cos(a1)));
	mat2 rot2=mat2(vec2(cos(a2),sin(a2)),vec2(-sin(a2),cos(a2)));
	dir.xy*=rot1;
	dir.xz*=rot2;
	vec3 from=vec3(1.0,0.5,0.5);
	from-=vec3(0.0,time,0.0);
	from.xz*=rot1;
	from.xy*=rot2;
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*0.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a = pow(a, 2.3); // add contrast
		if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=vec3(dm,dm*.5,0.);
		v+=fade;
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
    
	v=mix(vec3(length(v)),v,saturation); //color adjust
    
    vec4 C = vec4(v*.01,1.);
    
     	C.r = pow(C.r, 0.35); 
 	 	C.g = pow(C.g, 0.36); 
 	 	C.b = pow(C.b, 0.38); 
 	
    vec4 L = C;   	
    
    COLOR.r = mix(L.r, SCurve(C.r), 0.7); 
    COLOR.g = mix(L.g, SCurve(C.g), 1.0); 
    COLOR.b = mix(L.b, SCurve(C.b), 0.2);     	
	
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/iterations = 20
shader_param/formuparam = 1.0
shader_param/volsteps = 10
shader_param/stepsize = 0.1
shader_param/zoom = 0.5
shader_param/tile = 0.5
shader_param/speed = 0.002
shader_param/brightness = 0.002
shader_param/darkmatter = 0.1
shader_param/distfading = 0.65
shader_param/saturation = 0.75
shader_param/iResolution = Vector2( 300, 300 )
shader_param/iMouse = Vector2( 0, 0 )

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1);
uniform float line_thickness : hint_range(0, 10) = 1.0;



void fragment() {
	vec2 OFFSETS[8] = {
	vec2(-1, -1), vec2(-1, 0), vec2(-1, 1), vec2(0, -1), vec2(0, 1), 
	vec2(1, -1), vec2(1, 0), vec2(1, 1)
};
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness / 2.0;
	vec4 color = texture(TEXTURE, UV);
	
	float inline = 1.0;
	float outline = 0.0;
	for (int i = 0; i < OFFSETS.length(); i++) {
		outline += texture(TEXTURE, UV + size * OFFSETS[i]).a;
		inline *= texture(TEXTURE, UV + size * OFFSETS[i]).a;
	}
	outline = min(1.0, outline) - color.a;
	inline = (1.0 - inline) * color.a;
	
	vec4 outlined_result = mix(color, line_color, outline + inline);
	COLOR = mix(color, outlined_result, outlined_result.a);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )
shader_param/line_color = Color( 0.396078, 0.552941, 0.760784, 1 )
shader_param/line_thickness = 5.921

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 2 )
margin_right = 1055.0
margin_bottom = 627.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": true
}

[node name="Sprite" type="Sprite" parent="."]
material = SubResource( 4 )
position = Vector2( 135.682, 155.045 )
rotation = -0.425751
scale = Vector2( 0.619323, 0.563352 )
texture = ExtResource( 1 )

[node name="Button" type="Button" parent="."]
margin_left = 301.414
margin_top = 150.0
margin_right = 701.414
margin_bottom = 220.0
custom_fonts/font = ExtResource( 3 )
text = "Start Game"
flat = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button2" type="Button" parent="."]
margin_left = 300.0
margin_top = 220.0
margin_right = 700.0
margin_bottom = 290.0
custom_fonts/font = ExtResource( 3 )
text = "leaderboard"
flat = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button3" type="Button" parent="."]
margin_left = 300.0
margin_top = 500.0
margin_right = 700.0
margin_bottom = 570.0
custom_fonts/font = ExtResource( 3 )
text = "Exit"
flat = true

[node name="Label" type="Label" parent="."]
margin_left = 433.238
margin_top = 6.60712
margin_right = 569.238
margin_bottom = 78.6071
custom_fonts/font = ExtResource( 3 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button4" type="Button" parent="."]
margin_left = 8.49489
margin_top = 556.887
margin_right = 73.4949
margin_bottom = 599.887
text = "?"
flat = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label2" type="Label" parent="."]
visible = false
margin_left = 56.7674
margin_top = 571.029
margin_right = 231.767
margin_bottom = 585.029
text = "Electric Callboy - Spaceman"

[node name="Label3" type="Label" parent="."]
margin_left = 729.97
margin_top = 10.5946
margin_right = 1007.97
margin_bottom = 151.595
custom_fonts/font = ExtResource( 3 )
text = "megyen - W A S D
shoot - SPACE
gránát -  E"

[connection signal="pressed" from="Button" to="." method="_on_Button_pressed"]
[connection signal="pressed" from="Button2" to="." method="_on_Button2_pressed"]
[connection signal="pressed" from="Button3" to="." method="_on_Button3_pressed"]
[connection signal="pressed" from="Button4" to="." method="_on_Button4_pressed"]
